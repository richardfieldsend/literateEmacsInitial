* Configuration file Using Org-Mode.
** Initial Setup Of Repositories.
*** Add Repositories and Configure Use Package Settings.
This file is used for all the settings used in my Emacs setup. The
file is built using Org-Mode which supports literate programming (a
concepy originally described by Donald Knuth, the Father of LaTeX). It
takes the concept of writing comments in your code and turns it on its
head, instead imagining a world where you write prose describing what
you are trying to achieve and how you plan on getting there, and then
you add code into the prose using code blocks.

In the case of Emacs, these code blocks can be in many different
languages but for the configuration file this will be Emacs Lisp
(elisp). The first block is required in order to set up the various
repositories (MELPA and ELPA) that will be used for the various
packages. This follows a discussion on Reddit here:

https://old.reddit.com/r/emacs/comments/dfcyy6/how_to_install_and_use_usepackage/

All future code blocks will be of a similar form:

#+begin_src emacs-lisp
  (eval-and-compile)
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
  ("melpa" . "https://melpa.org/packages/")
  ("gnu" . "https://elpa.gnu.org/packages")))
  (package-initialize)
  (package-refresh-contents)
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Configuration Using Built-in Functions.
*** Built-in Customisations - Cleaning the Window.
The first settings implemented are those that don't require any
packages installed. The changes are largely about removing unnecessary
parts of the Emacs window such as the menu bar and toolbar.
# Clean up Emacs window removing the menu bar, tool bar and scroll bar.
#+begin_src emacs-lisp
  (menu-bar-mode 0)			; Turn off menu bar (file/edit)
  (tool-bar-mode 0)			; Turn off icons
  (blink-cursor-mode 0)			; Stop cursor blinking
  (scroll-bar-mode 0)			; Where we're going we don't need no scroll bar
  (display-time-mode 1)			; add clock into mode-line
#+end_src
Having switched off the unnecessary bits of the Emacs window what we
are left with is a much simpler interface.
*** Built-in Customisations - Switch off splash screen
The information displayed on starting Emacs varies depending on how
you enter the program. I have got in the habit of using Emacs Client
which is much faster to start subsequent windows, but which doesn't
display a splash screen. 
If starting Emacs with the 'normal' command a splash screen is, by
default, displayed. As I've just started the program I don't really
need this information, so I switch it off and display a piece of text
which is different for each platform I'm using. This was initially
done as a test of detecting which machine is being used in case I want
to specify different packages on different machines (currently I don't).
# Don't Display the Splash-Screen on Start-up.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)	; Splash screen disabled
#+end_src
*** Built-in Customisations - Nice Font.
In a recent discussion on Reddit about using Emacs for creative
writing there was a suggestion for a suitable font setup. Given that I
aim to use Emacs to write lots of text I would like it to be fairly
attractive in the process.
# Set a nicer font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :font "Inconsolata Medium"
  :height 85)				; found by experimentation.
#+end_src

+begin_src emacs-lisp
  (variable-pitch-mode 1)			; for variable width font
  (visual-line-mode 1)
  (face-spec-set 'variable-pitch '((t :family "FreeSans")))
  ;; Taken from the following Reddit thread:
  ;; https://old.reddit.com/r/emacs/comments/g3otv4/packages_for_creative_writing/
  ;; Discussion is about using Emacs to write rather than code.
+end_src
*** Built-in Customisations - Highlight the current line.
Highlight the current line so it is easier to follow the text.
# Highlight the current line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)			; highlight current line
#+end_src
*** Built-in Customisations - Global line numbering.
As the files get longer it is useful to be able to refer to the line
number as a quick method of navigating the file. To navigate to a
specific like type M-g M-g (goto line) and then enter the number
required. 
#+begin_src emacs-lisp
  (global-linum-mode t)			; line numbering on.
#+end_src
** Configuration Using Package Functions.
*** Package recentf - Re-open recently visited files.
A frequent use-case for any text editor is to re-open a file
repeatedly. Emacs can maintain a list of previously opened files in
order to make them available for revisiting.

Keyboard shortcuts for recentf:
C-x C-r - Open the list of recent files.
#+begin_src emacs-lisp
  (use-package recentf
  :config
  (setq recentf-save-file "~/.Backups/recentf")
  recentf-max-saved-items 500
  recentf-max-menu-items 50
  (recentf-mode +1)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files))
#+end_src
*** Package Colour Theme - Colour Scheme
Install a colour theme using use-package.
#+begin_src emacs-lisp
  (use-package zenburn-theme
  :ensure t
  :config
  (load-theme 'zenburn t))
#+end_src
