* Configuration file Using Org-Mode.
** Initial Setup Of Repositories.
*** Add Repositories and Configure Use Package Settings.
This file is used for all the settings used in my Emacs setup. The
file is built using Org-Mode which supports literate programming (a
concepy originally described by Donald Knuth, the Father of LaTeX). It
takes the concept of writing comments in your code and turns it on its
head, instead imagining a world where you write prose describing what
you are trying to achieve and how you plan on getting there, and then
you add code into the prose using code blocks.

In the case of Emacs, these code blocks can be in many different
languages but for the configuration file this will be Emacs Lisp
(elisp). The first block is required in order to set up the various
repositories (MELPA and ELPA) that will be used for the various
packages. This follows a discussion on Reddit here:

https://old.reddit.com/r/emacs/comments/dfcyy6/how_to_install_and_use_usepackage/

All future code blocks will be of a similar form:

#+begin_src emacs-lisp
  (eval-and-compile)
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("gnu" . "https://elpa.gnu.org/packages")))
  (package-initialize)
  (package-refresh-contents)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Configuration Using Built-in Functions.
*** Built-in Customisations - Cleaning the Window.
The first settings implemented are those that don't require any
packages installed. The changes are largely about removing unnecessary
parts of the Emacs window such as the menu bar and toolbar.
# Clean up Emacs window removing the menu bar, tool bar and scroll bar.
#+begin_src emacs-lisp
  (menu-bar-mode 0)			; Turn off menu bar (file/edit)
  (tool-bar-mode 0)			; Turn off icons
  (blink-cursor-mode 0)			; Stop cursor blinking
  (scroll-bar-mode 0)			; Where we're going we don't need no scroll bar
  (display-time-mode 1)			; add clock into mode-line
#+end_src
Having switched off the unnecessary bits of the Emacs window what we
are left with is a much simpler interface.
*** Built-in Customisations - Switch off splash screen
The information displayed on starting Emacs varies depending on how
you enter the program. I have got in the habit of using Emacs Client
which is much faster to start subsequent windows, but which doesn't
display a splash screen.
If starting Emacs with the 'normal' command a splash screen is, by
default, displayed. As I've just started the program I don't really
need this information, so I switch it off and display a piece of text
which is different for each platform I'm using. This was initially
done as a test of detecting which machine is being used in case I want
to specify different packages on different machines (currently I don't).
# Don't Display the Splash-Screen on Start-up.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)	; Splash screen disabled
#+end_src
*** Built-in Customisations - Nice Font.
In a recent discussion on Reddit about using Emacs for creative
writing there was a suggestion for a suitable font setup. Given that I
aim to use Emacs to write lots of text I would like it to be fairly
attractive in the process.
# Set a nicer font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Inconsolata Medium"
		      :height 85)				; found by experimentation.
#+end_src

+begin_src emacs-lisp
  (variable-pitch-mode 1)			; for variable width font
  (visual-line-mode 1)
  (face-spec-set 'variable-pitch '((t :family "System San Francisco Display")))
;;  (face-spec-set 'variable-pitch '((t :family "Fira Mono")))
  ;; Taken from the following Reddit thread:
  ;; https://old.reddit.com/r/emacs/comments/g3otv4/packages_for_creative_writing/
  ;; Discussion is about using Emacs to write rather than code.
+end_src
*** Built-in Customisations - Highlight the current line.
Highlight the current line so it is easier to follow the text.
# Highlight the current line
#+begin_src emacs-lisp
  (global-hl-line-mode 1)			; highlight current line
#+end_src
*** Built-in Customisations - Global line numbering.
As the files get longer it is useful to be able to refer to the line
number as a quick method of navigating the file. To navigate to a
specific like type M-g M-g (goto line) and then enter the number
required.
#+begin_src emacs-lisp
  (global-linum-mode t)			; line numbering on.
#+end_src
*** Built-in Customisations - Transparency for Emacs.
One of the most popular look and feel tweaks that almost everyone
seems to want is some transparency. On my machine the terminal windows
have transparency, and so it is nice to have this functionality on
Emacs too. This doesn't require any special packages in Emacs, though
I think it does require the Compton compositor to be installed an
running (other compositors are available, but Compton is the
lightweight option).
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 50))
  (add-to-list 'default-frame-alist '(alpha 85 50))
#+end_src
The values 85/50 can be tweaked as required to increase or decrease
opacity, but these numbers work with a lot of wallpapers.
*** Built-in Customisations - Scratch buffer text.
I run Emacs on a number of different machines, and I like to have
different text displayed in the scratch buffer depending on which
machine is being used. This was originally a way of testing ways of
detecting which machine is being used with the intention of modifying
which packages are installed on the basis of the machine in question.

The four machines of interest are:

- iMac - Psychology (psychol-ford)
- Avantek desktop ()
- Dell Latitude E5500 laptop (ziggy-latitude)
- Raspberry Pi 2B (ziggypi)

Emacs can select code to run on the basis of system name using a
lookup on the variable 'system name'. According to the variable
description, system-name is defined in 'C Source Code', but this
variable is obsolete in Emacs after version 25.1. Use (system-name)
instead.

#+begin_src emacs-lisp
  ;; ziggy-latitude - my home laptop:
  (if (string=(system-name) "ziggy-latitude")
      (setq initial-scratch-message
	    "I use Emacs, which might be thought of as a thermonuclear word processor.\n\n\tNeal Stephenson - In the Beginning... Was the Command Line"))
  ;; psychol-ford (Psychology)
  (if (string=(system-name) "psychol-ford")
      (setq initial-scratch-message
	    "'Space,' it says,'is big. Really big. You just won't believe how vastly, hugely, mindbogglingly big it is.\nI mean, you may think it's a long way down the road to the chemist, but that's just peanuts to space.'\n\nHitch Hiker's Guide To The Galaxy\n\t Douglas Adams."))
  ;; plantsci-cowin01
  (if (string=(system-name) "plantsci-cowin01")
      (setq initial-scratch-message
	    "The most exciting phrase to hear in science, the one that heralds the most discoveries is\nnot 'Eureka!' (I have found it!) but 'That's funny...'\n\nIsaac Asimov"))
#+end_src
*** Built-in Customisations - Set Default Major Mode to Text.
Some of the customisations made in this file don't get applied unless
the mode is correctly set. If it isn't set in any other way it will
normally default to 'fundamental', but text is better for my purposes.
#+begin_src emacs-lisp
  (setq-default major-mode 'text-mode)
#+end_src
*** Built-in Customisations - Save backup files to separate folder.
By default Emacs creates backup files of those being edited by simply
adding a tilde (~) to the filename and placing the file in the same
folder. Placing the files in a single backup directory and keeping
multiple versions gives the option of stepping back through the
various versions if required. Text files, whether programs or prose
are, relative to modern storage devices, pretty small, so there is no
downside to keeping lots of copies of files. The configuration should
stop the number getting too ridiculous though.
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.Backups/"))) ; Hidden backup folder.
  (setq delete-old-versions t)			       ; delete old versions silently
  (setq kept-new-versions 6)			       ; no. of newer files to keep
  (setq kept-old-versions 2)			       ; no. of older files to keep
  (setq version-control t)			       ; create numbered backups
  (setq vc-make-backup-files t)			       ; backup even files which are under version control
  (setq auto-save-file-name-transforms '((".*" "~/.Backups/" t))) ; uniquify saved file names
#+end_src
*** TODO - check information on the way backup works.
This should now generate backup files in a hidden directory where they
can be retrieved if required.
*** Built-in Customisations - Saved History Configuration.
Inspired by Sacha Chua's writings on C3F (Creation and Conservation of
Computer Files) and the linked page here:

https://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html

As noted in the description for the backup settings, above, modern
storage devices are vast, and text files are usually small, especially
when compared to image, sound and video files. As this is the case, an
approach of save often is quite reasonable.
#+begin_src emacs-lisp
  (setq savehist-file "~/.Backups/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
	'(kill-ring
	  search-ring
	  regexp-search-ring))
#+end_src
This configuration saves the history in a file in the same backup
folder as above. This is a good location as the folder is hidden from
day to day view.
*** Built-in Customisations - White Space Trimming.
When writing for extended periods in Emacs there is a likelihood that
extra lines will get added to the file. To tidy up after itself Emacs
can trim excess lines from the end of the file.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ; Remove any excess lines.
#+end_src
This function removes any extra lines at the end of the document. I
did take a look at having a way of removing any double spacing in the
document, given that this is somehow considered not the right thing
any more, but I haven't been able to do this yet.
*** Built-in Customisations - yes/no with y/n.
Save time and keystrokes using y/n rather than yes/no.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Built-in Customisations - Word wrapping for all the modes.
TODO - add the text
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
  (add-hook 'latex-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-auto-fill)
  (add-hook 'fundamental-mode-hook 'turn-on-auto-fill)
  (add-hook 'prog-mode-hook 'turn-on-auto-fill)
#+end_src
*** Built-in Customisations - Time stamping files when saved.
The Magit functionality which supports the use of Git provides a good
way of tracking file changes. However, with some files it may also be
useful to have a record of when a file is changed, and who by. This
function requires a suitable tagged text entry in the first 8 lines of
a file. The two supported tags are:

- Time-stamp: " "

and

- Time-stamp: < >

In both cases a space is required when the tag is created. Once
activated, saving the file will update the delimited space to insert a
time, date and username entry which will update whenever the file is
updated. The fact that the tag updates whenever the file is saved
means that it is always flagged up as a line which changes if using
Git, so my feeling is that it is better to either use Git or the
Time-stamp, not both. It is possible to change the time stamp format,
but I haven't made any changes so far (April 2020).
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'timp-stamp) ; run time stamp function whenever file is saved.
  (setq time-stamp-pattern nil)		 ; no unusual format for timestamp implimented.
#+end_src
More information on the time stamp can be found here:
https://www.gnu.org/software/emacs/manual/html_node/emacs/Time-Stamps.html
and
https://www.emacswiki.org/emacs/TimeStamp
Modifications for time stamp include:
- where in the file the time stamp can appear. By default this is the
  first 8 lines, but if you designate this using a negative number the
  time stamp can appear at the end of the file.

- what time and date information and user information, in what order
  is used. By default the order is YYYY-MM-DD HH:MM:SS username.

In both these customisations, the Emacs wiki page cautions against
making changes as it may cause issues if files are shared across
machines.

*** Built-in Customisations - Abbreviation Expansions.
Emacs has two main methods of providing abbreviation expansion which
can be used as a way of reducing the amount of typing you have to
do.
**** Dynamic Expansion.
Out of the box, Emacs offers dynamic abbreviation expansion. The
approach is simple and straightforward. If a partial string has been
typed which is the start of a longer previous string then typing M-/
will search back through the file to find the suitable expansion and
expand the text appropriately. To demonstrate this, consider writing
about my research equipment from my days in Leicester. Typing the
words:

Weissenberg Rheogoniometer

repeatedly in a file is a real test of my typing skills. If, I now
type:

wei

and hit M-/ I get an optional expansion, of the word to weissenberg
(if I use a capital it will be preserved). Then typing a space and M-/
again will add the second word.

However, I have recently been seeing lots of references to Hippie
Expand (https://www.emacswiki.org/emacs/HippieExpand) which purports
to do this type of expansion and more.

The following code enables Hippie Expand.
#+begin_src emacs-lisp
  (global-set-key "\M-/" 'hippie-expand)	; bind hippie expand
#+end_src
This function may require more tweaks to use its full power, but it
works as expected for now.
**** abbrev Functionality.
The other abbreviation expansion system which I use is to
automatically expand preconfigured abbreviations to full pieces of
text. One example of this is the acronyms I have configured to expand
when I am writing emails where Emacs is my editor of choice with
Evolution opens when I am editing an email.

Expansions include:

tia - Thanks in anticipation

bw - best wishes

hth - hope that helps

The file which holds the expansions is stored in the .emacs.d folder
so that it can be placed under version control.
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)		; Activate abbreviation mode
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs") ; file containing expansions
#+end_src
The process of expanding the abbreviations is automatic, which is, in
most respects the big advantage of this function, though it does
require you to be careful in selecting the short form that is to be
expanded. If you use a short form which is an existing word then the
insertion will need to be undone. The undone sequence doesn't have a
keyboard shortcut, so ideally this should be avoided.

Adding expansions:

With the cursor at the end of the string to be expanded type:

C-x a i g - Add abbreviation for global use (all modes)

C-x a i l - Add abbreviation for use in the current major mode.

One use for this which is very useful is automatic typo fixing. Like
most people there are words which I repeatedly mistype. In this case
you can set the mis-type to correct itself.

The abbreviation file can be added to version control and shared
across multiple devices.

*** Built-in Customisations - SavePlace - Save your location for next time.
One of those behaviours that you don't really know that you miss until
it isn't there. As of now, when I open the configuration file it opens
as a fully collapsed Org file with just the main header
displayed. Navigation to the place where I was last is only the work
of a few moments, but when you are editing and restarting repeatedly
it does get tedious. This configuration turns on a function that
records where is the file you are in a suitable file. 

More information is available here:
https://www.emacswiki.org/emacs/SavePlace

I am placing the places file in the .Backups folder so that it doesn't
interfere with the initialisation files or my home folder.
#+begin_src emacs-lisp
  (save-place-mode 1)			;turn on place saving
  (setq save-place-file "~/.Backups/.places") ; location of the places file.
#+end_src
Having restarted Emacs and checked that the places file now exists, I
can confirm that this function now works as expected.
*** Built-in Customisations - Native code indentation for Org-mode Source Blocks.
This function is one of those that will have a major impact on the
structure of the file, and is likely to result in more than one
commit!

So far, adding the source code blocks in the initialisation files has
been a matter of adding the opening and closing tags, the language and
then the source code. Indentation hasn't really worked properly, which
isn't ideal in Lisp, but isn't problematic, like it would be in
Python.

The code below will turn on proper code indentation for source
blocks. If this works properly then I will need to indent the source
blocks.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src
The function was found in a question and answer on Stack Overflow
here:
https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks
*** Built-in Customisations - Better Frame Title.
Emacs does a lot of things to tell you what file you are editing, what
mode you are in and the like. This information is usually available on
the modeline. The following code block changes the frame title from
the normal, generic  'emacs@machinename' to something more useful. In
this case:

Emacs - Buffer: <buffername> : File : <filename including path> : Mode
<major mode in use>.

I may modify this at some point (it has only become relevant again as
I have re-enabled the titles on windows in i3).

#+begin_src emacs-lisp
(setq frame-title-format '("Emacs - Buffer: %b : File: %f : Mode: %m"))
#+end_src
*** Built-in Customisations - Bookmarks for Emacs.
Multiple bookmarks can be set to help you find your way back to a
particular file and location in that file. The only customisation I am
employing is to save the bookmarks file to my Dropbox so that it is
available on all my computers.
#+begin_src emacs-lisp
  (set 'bookmark-default-file "~/Dropbox/.bookmarks")
  (add-hook 'before-save-hook 'bookmark-save) ; Remove any excess lines.
#+end_src
I have added an extra line from previous versions of this file to add
a 'before saving the file' hook which will save the bookmarks file.

The commands for using the bookmarks are:
- C-x r m - Mark the current location as a bookmark.
- C-x r b - Jump to a bookmark
- C-x r l - List the available bookmarks

** Configuration Using Package Functions.
*** Package recentf - Re-open recently visited files.
A frequent use-case for any text editor is to re-open a file
repeatedly. Emacs can maintain a list of previously opened files in
order to make them available for revisiting.

Keyboard shortcuts for recentf:
C-x C-r - Open the list of recent files.
#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-save-file "~/.Backups/recentf")
    recentf-max-saved-items 500
    recentf-max-menu-items 50
    (recentf-mode +1)
    (global-set-key (kbd "C-x C-r") 'recentf-open-files))
#+end_src
*** Package Colour Theme - Colour Scheme
Install a colour theme using use-package.
There are many, many themes available, and I like to change them once
in a while, but the current one (Zenburn) is a fairly dark one with
muted font colour which is quite nice.

#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+end_src
*** Package Rainbow Delimiters - Colour Paired Brackets
Many programming languages rely on brackets to group things together,
and Lisp dialects are especially dependent on this usage. The
following sets up a package for rainbow delimiters which makes it
easier to check that delimiters are paired. The second section
activates the electric pair mode which puts in the second member of
each pair automatically but leaves the cursor in the middle of the
pair so you can add the contents of the brackets.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'org-mode-hook 'rainbow-delimiters-mode))
  (use-package electric
    :ensure t
    :init
    :config (add-hook 'prog-mode-hook 'electric-pair-mode)
    :config (add-hook 'LaTeX-mode-hook 'electric-pair-mode)
    :config (add-hook 'text-mode-hook 'electric-pair-mode)
    :config (add-hook 'org-mode-hook 'electric-pair-mode))
#+end_src
*** Package Doom Modeline - pretty modeline
The standard mode line is okay, but this is Emacs, so why be satisfied
with okay when you can have something a lot nicer. The indicator for
the file type being edited relies on the installation of the
'all-the-icons' package before the modeline. And the themes for the
modeline are then installed as well.
#+begin_src emacs-lisp
  (use-package all-the-icons)		; Install all the icons.
  (use-package doom-modeline		; Install doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config (setq doom-modeline-icon t))	; Line required to trigger file type icon in  modeline.
  (use-package doom-themes
    :config (load-theme 'doom-molokai t))
#+end_src
*** Package Minimap Mode - Overview of file in tiny text
This function opens a narrow side window which shows a mini version of
the text. It can be useful to see the 'shape' of the file. This
switches on the function for TeX, LaTeX and Programming.

#+begin_src emacs-lisp
  (use-package minimap			; Minimap mode
    :config (setq minimap-major-modes '(tex-mode LaTeX-mode prog-mode))
    :config (minimap-mode 1))
#+end_src
This function could probably be fiddled with as the tiny text is
really, really tiny.
*** Package Org-mode Fancy Bullets - Pretty Bullets for Org mode
The heading levels in Org-mode are created by multiple asterisks. It
gets long, so replace the long strings of stars with pretty bullets.
#+begin_src emacs-lisp
  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))		;
#+end_src
*** Package Fireplace - The warm glow of using the one true editor
One of those completely silly and unnecessary packages. All it does is
display a fire animation.
#+begin_src emacs-lisp
  (use-package fireplace)
#+end_src
*** Package Dired Git Info - show Git information in dired buffer
#+begin_src emacs-lisp
  (use-package dired-git-info)
#+end_src
*** Package Rainbow Delimiters - Coloured Brackets.
Emacs uses Lisp for its extensible code, and one thing that becomes
very obvious once you start playing with Lisp is that it is very
bracket heavy. Keeping track of the opening and closing of these
brackets, braces and the like can be difficult, and there are a couple
of functions within this configuration that are here to help. The
first, this one, is to use coloured bracket pairs. Each opening
bracket will be in a different colour, and the relevant closing
bracket will be in the appropriate, matching colour.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters		; Install the package
    :ensure t
    :init
    :config (add-hook #'prog-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook #'LaTeX-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook #'text-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook #'org-mode-hook 'rainbow-delimiters-mode)
    ;; The colouring of pairs of brackets is useful, but the rest of this
    ;; function aids adding balanced brackets by inserting brackets in
    ;; pairs automatically.
    :config (add-hook 'prog-mode-hook 'electric-pair-mode)
    :config (add-hook 'LaTeX-mode-hook 'electric-pair-mode)
    :config (add-hook 'text-mode-hook 'electric-pair-mode)
    :config (add-hook 'org-mode-hook 'electric-pair-mode))
#+end_src
*** Package Magit - Version Control within Emacs
**** Package Dash - Required by Magit.
#+begin_src emacs-lisp
  (use-package dash)
#+end_src
**** Package Diminish - Required by Magit.
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
**** Package Magit-pop-up - Required by Magit.
#+begin_src emacs-lisp
  (use-package magit-popup)
#+end_src
**** Package With-Editor - Required by Magit.
#+begin_src emacs-lisp
  (use-package with-editor)
#+end_src
**** Package ghub - GitHub integration (required by Magit)
#+begin_src emacs-lisp
  (use-package ghub)
#+end_src
Having installed the pre-requisites for the Magit, it is now time to
install the package itself.
**** Package Magit - The package itself.
#+begin_src emacs-lisp
  (use-package magit
    :config (global-set-key (kbd "C-x g") 'magit-status))
#+end_src
**** Package Magit Documentation - Good to know.
#+begin_src emacs-lisp
  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
		 "~/.emacs.d/elpa/magit-2.90.1/dir/"))

#+end_src 
*** Package Helm - Filtering Everywhere.
Helm is one of those packages that a lot of people consider almost
central to their use of Emacs. And when you go through the process of
rebuilding your Emacs initialisation from scratch and you haven't got
it for some period of time you realise how darn useful it is!

The configuration installs Helm and then activates it. It then
replaces the standard 'M-x' with 'helm-M-x' which provides the search
functionality. This means you can filter everything by entering
fragments of text, and see the list of options dynamically reflect the
change. 

For example, if you want to update the packages in Emacs you need to
list the packages which uses the command
'package-list-packages'.

With Helm running typing 'pack list' will filter down to the option
required. You can then move through the list using C-n/C-p.

A similar buffer selection is bugun with C-x b. Type a substring of
the buffer you want and the filtering kicks in.

#+begin_src emacs-lisp
  ;; Helm Setup.
  (use-package helm
    :diminish helm-mode
    :init
    :config (require 'helm)
    :config (require 'helm-config)
    :config (helm-mode 1)
    :config (global-set-key (kbd "C-c h") 'helm-command-prefix)
    :config (global-unset-key (kbd "C-x c"))
    :config (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    ;; The above line makes Tab work as with 'normal' Emacs.
    :config (define-key helm-map (kbd "C-z") 'helm-select-action) ; list actions using C-z
    :config (global-set-key (kbd "M-x") #'helm-M-x)
    :config (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    :config (global-set-key (kbd "C-x C-f") #'helm-find-files)
    ;; Change the helm buffer to a small block at the base of the Emacs window.
    ;; Following this page: http://tuhdo.github.io/helm-intro.html
    :config (setq helm-autoresize-max-height 0)
    :config (setq helm-autoresize-min-height 20)
    :config (helm-autoresize-mode 1))
#+end_src
Note that the Helm configuration makes reference to using Diminish,
this is already installed as part of my Magit installation. 

*** Package Helm Spotify Plus - Control Spotify from within Emacs.
When you're hacking in Emacs and listening to some toonz then do you
need to move to Spotify to control Spotify. You can scan for tracks,
play, pause, go back to beginning of track or go to the next one.

- C-c s s - Helm Spotify Plus (will ask for search terms)
- C-c s f - forward a track
- C-c s b - back to beginning of track
- C-c s p - play track
- C-c s g - pause (C-g is a popular Emacs quit combination)

To start playing use C-c s s, you'll be asked for the search term, a
list of tracks will be displayed. Select the track you want and hit
return.

The search can be free text, artist, track or market and any
combination of these:

- chumbawamba - no identifier, the search is free text
- a:chumbawamba - artist search
- t:timebomb - track search
- a:bragg t:levi - both artist and track
- a:bragg m:US - artist and market

If the list is extensive then select a result and hit tab to get a
list of possible actions. These include options like listening to the
album.

#+begin_src emacs-lisp
	  (use-package helm-spotify-plus
	    :config (global-set-key (kbd "C-c s s") 'helm-spotify-plus)
	    :config (global-set-key (kbd "C-c s f") 'helm-spotify-plus-next)
	    :config (global-set-key (kbd "C-c s b") 'helm-spotify-plus-previous)
	    :config (global-set-key (kbd "C-c s p") 'helm-spotify-plus-play)
	    :config (global-set-key (kbd "C-c s g") 'helm-spotify-plus-pause))
#+end_src
*** Package Palimpsest - Edits moved to external files or the end of the file.
In the age where purchasing paper is easy and cheap, it is easy to
forget what a valuable commodity good stationery once was. A
palimpsest is a manuscript where an older piece of writing has been
incompletely removed, and can still be read. It most often occurs with
papyrus or vellum.

The Emacs Palimpsest mode provides a method for removing text from a
document and either saving it to an external file with a suitable
name, from which it can be recovered if required later, or the text
can be moved wholesale to the end of the document.

The key combinations for using the Palimpsests are:

C-c C-r - move selected text to the end of the file.
C-c C-q - move selected text to the relevant trash file.

#+begin_src emacs-lisp
  (use-package palimpsest
    :config (add-hook 'text-mode-hook 'palimpsest-mode)
    :config (add-hook 'prog-mode-hook 'palimpsest-mode)
    :config (add-hook 'LaTeX-mode-hook 'palimpsest-mode)
    :config (add-hook 'latex-mode-hook 'palimpsest-mode)
    :config (add-hook 'org-mode-hook 'palimpsest-mode)
    :config (add-hook 'fundamental-mode-hook 'palimpsest-mode)
)
#+end_src
The external filename for saving the moved text is the existing file
name with the text 'trash.' inserted between the filename and the
filetype extension.
*** Package Achievements - Track your usage of Emacs and your Skillz.
#+begin_src emacs-lisp
  (use-package achievements
    :config (require 'achievements))
#+end_src
To check what achievements are available, and which have been achieved
run:

achievements-list-achievements

*** Package All The Icons for Dired - Nice icons for Dired page.
When loading Dired this function provides nice eye candy icons for the
file types.
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
		:config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

*** Package YaSnippet - Snippets to save you typing.
Snippets are a way of adding text using templates which can then move
the cursor into the correct location to add further text. I have added
the package because it is popular and I think it might be useful, but
in the modes that I'm interested in it isn't particularly useful. In
LaTeX mode, for instance, the templating and tag insertion within the
AuCTeX package is more useful than the Yasnippets approach.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
      :init
      (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** Configuration For Programming Functions.
*** Programming in C/C++
My old customisation has only one entry for C/C++, but it is commented
out. I am enabling it now, to see if it works.
#+begin_src emacs-lisp
  (use-package cc-mode
    :config (add-hook 'c-mode-hook
		      '(lambda ()
			 (c-set-style "linux")
			 (c-toggle-auto-state)
			 (c-toggle-hungry-state)))
    :config (add-hook 'c++-mode-hook
		      '(lambda ()
			 (c-set-style "Stroustrup")
			 (c-toggle-auto-state))))
  (use-package company
  :config (progn
	    (add-hook 'after-init-hook 'global-company-mode)
	    (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)
	    (setq company-idle-delay 0)))
#+end_src

+begin_src emacs-lisp
  (use-package ecb
    :config (require 'ecb))
+end_src
I should look into this as there are lots of pages on the web on how
to get Emacs to be a good C/C++ editor...

*** Programming in Python
Python is an extremely popular language nowadays, as, while it is easy
to write and understand, modern hardware has overcome many of the
issues that tended to impact such 'friendly' languages in the past,
such as performance. It also has very good libraries for text
manipulation and the like, which is useful in the big data/machine
learning era.

This page:

https://realpython.com/emacs-the-best-python-editor/

is being used as the source of my configuration, at least, to begin
with.
#+begin_src emacs-lisp
  (use-package elpy
    :config (elpy-enable)
    :config (setq python-shell-interpreter "python3" python-shell-interpreter-args "-i"))
  (use-package flycheck
    :config (progn global-flycheck-mode)
    :config (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
  (use-package py-autopep8
    :config (require 'py-autopep8)
    :config (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
  (use-package ein)
#+end_src

*** Programming in Clojure.
Activate Clojure mode ready to code in this Lisp dialect. This is so I
can follow the guidance in the book 'Clojure for The Brave and the
True' eBook. 
# Installing Clojure Mode and Cider.
#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.edn\\'" . clojure-mode))
    :init (add-hook 'clojure-mode-hook #'paredit-mode))
  (use-package clojure-mode-extra-font-locking)
  (use-package cider
    :defer t
    :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
    :diminish subword-mode
    :config 
    (setq nrepl-log-messages t
	  cider-repl-display-in-current-window t
	  cider-repl-use-clojure-font-lock t
	  cider-prompt-save-file-on-load 'always-save
	  cider-font-lock-dynamically '(macro core function var)
	  nrepl-hide-special-buffers t
	  cider-overlays-use-font-lock t)
    (cider-repl-toggle-pretty-printing))
  (use-package projectile)
  (use-package tagedit)
  (use-package paredit)
#+end_src
This code block installs Clojure mode, font-locking (syntax colouring
for Clojure), Cider, Projectile and tagedit. These look like the main
ones of concern in the Clojure book, but others may be added later.

*** Programming in Lisp using Slime.
As well as Clojure, I have been reading about Lisp using Common Lisp
(clisp). The following configures Slime when using Lisp.
#+begin_src emacs-lisp
    (use-package slime
      :mode (("\\.lisp'" . slime-mode))
      :config (setq inferior-lisp-program "/usr/bin/clisp"))
#+end_src
** Configuration for Writing Text.
*** Package for Writeroom Mode - Distraction Free Writing.
There is a reasonable distraction free writing program for Linux
called Focus Writer. It looks pretty, does away with the page
furniture and even has a word count funciton that can be tied to a
word target for the day. But it isn't Emacs, which is bothersome!

WriteRoom provides a similar distraction free full screen text editing
environment within Emacs. Nice, but simplistic.
#+begin_src emacs-lisp
  (use-package writeroom-mode)		; Install and enable writeroom mode.
#+end_src
Things that would be useful: 
- an updating word count for both normal text and LaTeX.

*** Package for HTML Editing - Web Page Creation.
Emmet mode is the current best option for creating web pages. It
essentially runs on the basis that you enter simple tags and then run
the expansion key combination and this converts the tag into an almost
fully formed bit of HTML. It  balances out opening and closing tags
etc, leading to fewer entries in your code. It also helps when writing
CSS files, though I haven't  experimented much with that
functionality.
#+begin_src emacs-lisp
  (use-package emmet-mode
    :config (add-hook 'html-mode-hook 'emmet-mode)
    :config (add-hook 'css-mode-hook 'emmet-mode))
  ;; Enable emmet mode for both HTML and CSS files.
#+end_src
*** Package for word counting - wc-mode
I have looked at word counting in Emacs a few times. It has been
fairly easy to provide word counts manually, but I wanted something
that would provide the information at a glance. 

The code below installs the word count mode and also sets a modeline
format to display this information. However, as I am now using Doom
Modeline the format isn't implemented. I have enabled the behaviour
using customize-group, but will transfer this to the config.org file
instead.
#+begin_src emacs-lisp
  (use-package wc-mode
    :ensure t
    :config (require 'wc-mode)
    :config (global-set-key "\C-cw" 'wc-mode)
  )
#+end_src
*** Package for LaTeX Writing - AuCTeX.
I know that there are other LaTeX supporting packages for Emacs, but
the one I started of using and have stuck with is AuCTeX.

AuCTeX provides support for writing multi-part documents, package
selection and lots of other useful things.
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config (setq TeX-auto-save t)
    :config (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    :config (add-hook 'latex-mode-hook 'turn-on-reftex)
    :config (setq reftex-plug-into-AUCTeX t)
    :config (setq-default TeX-master nil)
    :config (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    :config (add-hook 'latex-mode-hook 'LaTeX-math-mode)
    :config (setq TeX-fold-mode 1)
    :config (setq TeX-parse-self t)
    :config (setq TeX-electric-escape t)
    :config (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
    :config (add-hook 'latex-mode-hook 'outline-minor-mode))
#+end_src
*** Package for BibTeX Management - Using eBib
LaTeX manages bibliographic data using BibTeX. A package that helps
manage this is eBib. The configuration saves the bibliographies in a
single folder, with each bibliographic file being targetted at a
particular book type.
#+begin_src emacs-lisp
  (use-package ebib
    :config (global-set-key "\C-cb" 'ebib)
    :config (setq ebib-bib-search-dirs '("~/bibliographies/"))
    :config (setq ebib-file-search-dirs '("~/bibliographies/"))
    :config (setq ebib-default-entry-type 'Book)
    :config (setq ebib-preload-bib-files
		  '("humble.bib" "amazon.bib" "paperbacks.bib" "hardbacks.bib" "audiobooks.bib"))
    :config (setq ebib-keywords-field-keep-sorted t)
    :config (setq ebib-keywords-file "~/bibliographies/keywordslist.txt")
    :config (setq ebib-keywords-use-only-file t)
    :config (setq ebib-reading-list-file "~/bibliographies/ToReadList.org")
    :config (setq ebib-use-timestamp t))
#+end_src
*** Package for Flyspell - On the fly spellchecking
No text editor is really worth the name if you don't get a realtime
spell checking process built-in. 

Of course, if you are going to do this you want to make sure you are
using the right version of English!
#+begin_src emacs-lisp
  (require 'ispell)
  (setq ispell-dictionary "british")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'fundamental-mode-hook 'flyspell-mode)
#+end_src
*** Package for Flycheck - On the fly grammar and lint checking.
This is derived from a Reddit post which pointed to this page:

https://www.macs.hw.ac.uk/~rs46/posts/2018-12-29-textlint-flycheck.html

#+begin_src emacs-lisp
  (require 'flycheck)			; installed already by Elpy
  (flycheck-define-checker textlint
    "A linter for text."
    :command ("npx" "textlint"
	      "--config" "/home/rf343/.Backups/.textlintrc"
	      "--format" "unix"
	      "--rule" "write-good"
	      "--rule" "no-start-duplicated-conjunction"
	      "--rule" "max-comma"
	      "--rule" "terminology"
	      "--rule" "period-in-list-item"
	      "--rule" "abbr-within-parentheses"
	      "--rule" "alex"
	      "--rule" "common-misspellings"
	      "--rule" "en-max-word-count"
	      "--rule" "diacritics"
	      "--rule" "stop-words"
	      "--plugin"
	      (eval
	       (if (derived-mode-p 'tex-mode)
		   "latex"
		 "@textlint/text"))
	      source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
	      (message (one-or-more not-newline)
		       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
	      line-end))
    :modes (text-mode latex-mode org-mode markdown-mode LaTeX-mode)
    )
  (add-to-list 'flycheck-checkers 'textlint)
#+end_src
This function is interesting as it provides real time criticism of the
text as you write it. I'm not sure I always like the result, but the
indication of overt wordiness and use of weasel words is worth keeping
in check. 

*** Package for Lorem Ipsum - Adding test text.
When testing a document layout function in any system (Org, LaTeX,
Markdown etc) then it is handy to be able to put in chunks of text
which look like proper text, but which isn't the sort of text you want
to read. Lorem Ipsum looks like Latin or similar, so you can see the
'shape' of the layout.
#+begin_src emacs-lisp
  (use-package lorem-ipsum)
#+end_src
*** Package for Typing of Emacs - A Typing Tutor in Emacs.
#+begin_src emacs-lisp
  (use-package typing
    :init
    (autoload 'typing-of-emacs "typing nil t")
    :config
    (progn
      (setq toe-starting-length 3)
      (setq toe-starting-time-per-word 10)
      (setq toe-max-length 20)))
#+end_src
*** Package for Focus Function - dim text away from the cursor.
#+begin_src emacs-lisp
  (use-package focus
    :ensure t
    :config (add-hook 'LaTeX-mode-hook 'focus-mode)
    :config (add-hook 'latex-mode-hook 'focus-mode)
    :config (add-hook 'org-mode 'focus-mode)
    :config (add-to-list 'focus-mode-to-thing '(text-mode . paragraph))
    :config (add-to-list 'focus-mode-to-thing '(LaTeX-mode . paragraph))
    :config (add-to-list 'focus-mode-to-thing '(latex-mode . paragraph))
    :config (add-to-list 'focus-mode-to-thing '(org-mode . paragraph)))
#+end_src
*** Package for Org Mode Journal - Writing a diary
+begin_src emacs-lisp
    (use-package org-journal
      :ensure t
      :config (defcustom journal-dir ,"~/Dropbox/diary/"))
+end_src
*** Package for Fountain Mode - Screenwriting Support.
Information on the package here:
https://github.com/rnkn/fountain-mode
Information about Fountain markup here:
https://fountain.io/
#+begin_src emacs-lisp
  (use-package fountain-mode
    :ensure t)
#+end_src
TODO: Investigate using Fountain to write screenplay type output. 

*** Package for Olivetti Mode - Simple text entry layout and display.
More information on Olivetti mode here:
https://github.com/rnkn/olivetti
I think this is meant to be similar to Writeroom mode, but less
hardcore anti-distraction.
#+begin_src emacs-lisp
  (use-package olivetti)
#+end_src
TODO: Compare and contrast this functionality with Writeroom. I
suspect that I don't need both, so I might as well choose one or the
other.

** Configuration for Personal Information Management.
*** Big Brother Database.
A simple text address book and data management system for Emacs. It
gets used most often to look up addresses at Christmas, but it can be
used for things like mailmerge if you are so minded.
#+begin_src emacs-lisp
    (use-package bbdb
      :config (bbdb-initialize)
      :init (setq bbdb-file "~/Dropbox/bbdb"))
#+end_src
** Configuration - Notes On Emacs Usage Outside of Individual Packages.
*** Emacs Server Usage.
When Emacs is first started it can take some moments to fire up. This,
especially when compared with Vim can seem problematic for the odd
quick edit. The solution is to run Emacs as a server and then open a
window connected to the existing instance. There were originally notes
on doing this by running Emacs as a daemon, but now I have moved to
starting Emacs using this command:

- emacsclient -a "" -c

If the server isn't already running then this command starts the
server and then runs the client to connect to the server. 

The difference in time taken to start can be serious. Starting Emacs
from nothing takes about 30s. Running emacsclient to connect to a
running server takes less than 5s.
** Configuration - Abandoned Packages.
- Word of the Day - Not  worth the clock cycles, though may be worth
  another look at some point.
